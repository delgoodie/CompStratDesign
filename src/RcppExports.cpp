// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// EstimateCov
arma::mat EstimateCov(arma::mat data, double lambda);
RcppExport SEXP _CompStratDesign_EstimateCov(SEXP dataSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(EstimateCov(data, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Majorizor_EM
float Majorizor_EM(arma::mat sig_til, arma::mat sig, arma::mat S, float tau);
RcppExport SEXP _CompStratDesign_Majorizor_EM(SEXP sig_tilSEXP, SEXP sigSEXP, SEXP SSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sig_til(sig_tilSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< float >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(Majorizor_EM(sig_til, sig, S, tau));
    return rcpp_result_gen;
END_RCPP
}
// Majorizor_EM_grad
arma::mat Majorizor_EM_grad(arma::mat sig_til, arma::mat sig, arma::mat S, float tau);
RcppExport SEXP _CompStratDesign_Majorizor_EM_grad(SEXP sig_tilSEXP, SEXP sigSEXP, SEXP SSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sig_til(sig_tilSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< float >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(Majorizor_EM_grad(sig_til, sig, S, tau));
    return rcpp_result_gen;
END_RCPP
}
// Majorizor_linear
float Majorizor_linear(arma::mat sig_til, arma::mat sig, arma::mat S);
RcppExport SEXP _CompStratDesign_Majorizor_linear(SEXP sig_tilSEXP, SEXP sigSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sig_til(sig_tilSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(Majorizor_linear(sig_til, sig, S));
    return rcpp_result_gen;
END_RCPP
}
// Majorizor_linear_grad
arma::mat Majorizor_linear_grad(arma::mat sig_til, arma::mat sig, arma::mat S);
RcppExport SEXP _CompStratDesign_Majorizor_linear_grad(SEXP sig_tilSEXP, SEXP sigSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sig_til(sig_tilSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(Majorizor_linear_grad(sig_til, sig, S));
    return rcpp_result_gen;
END_RCPP
}
// prox
arma::mat prox(arma::mat S, arma::imat G, double lambda, float& penalty, int maxiter, double tol, int verbose);
RcppExport SEXP _CompStratDesign_prox(SEXP SSEXP, SEXP GSEXP, SEXP lambdaSEXP, SEXP penaltySEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< float& >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(prox(S, G, lambda, penalty, maxiter, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ggb_psd
arma::mat ggb_psd(arma::mat S, arma::imat G, double lambda, float& penalty, int maxiter, double tol, float delta, int verbose);
RcppExport SEXP _CompStratDesign_ggb_psd(SEXP SSEXP, SEXP GSEXP, SEXP lambdaSEXP, SEXP penaltySEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP deltaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< float& >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< float >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ggb_psd(S, G, lambda, penalty, maxiter, tol, delta, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ggb_penalty
float ggb_penalty(arma::mat S, arma::imat G, double lambda, float& penalty, int maxiter, double tol, float delta, int verbose);
RcppExport SEXP _CompStratDesign_ggb_penalty(SEXP SSEXP, SEXP GSEXP, SEXP lambdaSEXP, SEXP penaltySEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP deltaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< float& >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< float >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ggb_penalty(S, G, lambda, penalty, maxiter, tol, delta, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ggb_mm
arma::mat ggb_mm(arma::mat S, arma::mat sig_til, arma::imat G, double t, double tol, double B, int maxiter, double lambda, int prox_maxiter, double prox_tol, int verbose);
RcppExport SEXP _CompStratDesign_ggb_mm(SEXP SSEXP, SEXP sig_tilSEXP, SEXP GSEXP, SEXP tSEXP, SEXP tolSEXP, SEXP BSEXP, SEXP maxiterSEXP, SEXP lambdaSEXP, SEXP prox_maxiterSEXP, SEXP prox_tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sig_til(sig_tilSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type prox_maxiter(prox_maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type prox_tol(prox_tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ggb_mm(S, sig_til, G, t, tol, B, maxiter, lambda, prox_maxiter, prox_tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// iter_method
arma::mat iter_method(arma::mat S, arma::imat G, double t, double tol, double B, int maxiter, double lambda, arma::vec& objective_vec, int ggb_maxiter, double ggb_tol, int verbose);
RcppExport SEXP _CompStratDesign_iter_method(SEXP SSEXP, SEXP GSEXP, SEXP tSEXP, SEXP tolSEXP, SEXP BSEXP, SEXP maxiterSEXP, SEXP lambdaSEXP, SEXP objective_vecSEXP, SEXP ggb_maxiterSEXP, SEXP ggb_tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type objective_vec(objective_vecSEXP);
    Rcpp::traits::input_parameter< int >::type ggb_maxiter(ggb_maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type ggb_tol(ggb_tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(iter_method(S, G, t, tol, B, maxiter, lambda, objective_vec, ggb_maxiter, ggb_tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// modify_by_ref
void modify_by_ref(float& val);
RcppExport SEXP _CompStratDesign_modify_by_ref(SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float& >::type val(valSEXP);
    modify_by_ref(val);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CompStratDesign_EstimateCov", (DL_FUNC) &_CompStratDesign_EstimateCov, 2},
    {"_CompStratDesign_Majorizor_EM", (DL_FUNC) &_CompStratDesign_Majorizor_EM, 4},
    {"_CompStratDesign_Majorizor_EM_grad", (DL_FUNC) &_CompStratDesign_Majorizor_EM_grad, 4},
    {"_CompStratDesign_Majorizor_linear", (DL_FUNC) &_CompStratDesign_Majorizor_linear, 3},
    {"_CompStratDesign_Majorizor_linear_grad", (DL_FUNC) &_CompStratDesign_Majorizor_linear_grad, 3},
    {"_CompStratDesign_prox", (DL_FUNC) &_CompStratDesign_prox, 7},
    {"_CompStratDesign_ggb_psd", (DL_FUNC) &_CompStratDesign_ggb_psd, 8},
    {"_CompStratDesign_ggb_penalty", (DL_FUNC) &_CompStratDesign_ggb_penalty, 8},
    {"_CompStratDesign_ggb_mm", (DL_FUNC) &_CompStratDesign_ggb_mm, 11},
    {"_CompStratDesign_iter_method", (DL_FUNC) &_CompStratDesign_iter_method, 11},
    {"_CompStratDesign_modify_by_ref", (DL_FUNC) &_CompStratDesign_modify_by_ref, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_CompStratDesign(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
